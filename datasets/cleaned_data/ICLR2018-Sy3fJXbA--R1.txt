 "The authors extend the ResNeXt architecture.  They substitute the simple add operation with a selection operation for each input in the residual module.  The selection of the inputs happens through gate weights, which are sampled at train time.  At test time, the gates with the highest values are kept on, while the other ones are shut.  The authors fix the number of the allowed gates to K out of C possible inputs (C is the multi-branch factor in the ResNeXt modules).  They show results on CIFAR-100 and ImageNet (as well as mini ImageNet).  They ablate the choice of K, the binary nature of the gate weights. \n\nPros:\n(+) The paper is well written and the method is well explained \n(+) The authors ablate and experiment on large scale datasets \n\nCons:\n(-) The proposed method is a simple extension of ResNeXt  \n(-) The gains are reasonable,  yet not SOTA, and come at a price of more complex training protocols (see below) \n(-) Generalization to other tasks not shown \n\nThe authors do a great job walking us through the formulation and intutition of their proposed approach.  They describe their training procedure and their sampling approach for the gate weights.  However, the training protocol gets complicated with the introduction of gate weights.  In order to train the gate weights along with the network parameters, the authors need to train the parameters jointly followed by the training of only the network parameters while keeping the gates frozen.  This makes training of such networks cumbersome. \n\nIn addition, the authors report a loss in performance when the gates are not discretized to {0,1}.  This means that a liner combination with the real-valued learned gate parameters is suboptimal.  Could this be a result of suboptimal, possibly compromised training?  \n\nWhile the CIFAR-100 results look promising, the ImageNet-1k results are less impressive.  The gains from introducing gate weights in the input of the residual modules vanish when increasing the network size.  \n\nLast, the impact of ResNeXt/ResNet lies in their ability to generalize to other tasks.  Have the authors experimented with other tasks, e.g. object detection, to verify that their approach leads to better performance in a more diverse set of problems?\n"