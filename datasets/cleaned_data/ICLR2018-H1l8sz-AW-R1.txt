 "\nGENERAL IMPRESSION:\n\nOverall, the revised version of the paper is greatly improved.  The new derivation of the method yields a much simpler interpretation, although the relation to the natural gradient remains weak (see below).  The experimental evaluation is now far more solid.  Multiple data sets and network architectures are tested, and equally important, the effect of parameter settings is investigated.  I enjoyed the investigation of the effect of L_2 regularization on qualitative optimization behavior. \n\n\nCRITICISM:\n\nMy central criticism is that the introduction of the L_2 norm as a replacement of KL divergence is completely ad-hoc; how it is related to KL divergence remains unclear.  It seems that other choices are equally well justified, including the L_2 norm in parameter space, which then defeats the central argument of the paper.  I do believe that L_2 distance is more natural in function space than in parameter space, but I am missing a strict argument for this in the paper. \n\nAlthough related work is discussed in detail in section 1, it remains unclear how exactly the proposed algorithm overlaps with existing approaches.  I am confident that it is easy to identify many precursors in the optimization literature, but I am not an expert on this.  It would be of particular interest to highlight connections to algorithm regularly applied to neural network training.  Adadelta, RMSprop, and ADAM are mentioned explicitly, but what exactly are differences and similarities? \n\nThe interpretation of figure 2 is off.  It is deduced that HCGD generalizes better, however, this is the case only at the very end of training, while SGD with momentum and ADAM work far better initially.  With the same plot one could sell SGD as the superior algorithm.  Overall, also in the light of figure 4, the interpretation that the new algorithm results in better generalization seems to stand on shaky ground, since differences are small. \n\nI like the experiment presented in figure 5 in particular.  It adds insights that are of value even if the method should turn out to have significant overlap with existing work (see above), and perform \"only\" on par with these:;  it adds an interesting perspective to the discussion of how network optimization \"works\", how it handles local optima and which role they play, and how the objective function landscape is \"perceived\" by different optimizers.  This is where I learned something new. \n\n\nMINOR POINTS:\n\npage 5: \"the any\" (typo)\n\npage 5: \"ture\" -> \"true\" (typo).