This paper considers the task of learning program embeddings with neural networks with the ultimate goal of bug detection program repair in the context of students learning to program.  Three NN architectures are explored, which leverage program semantics rather than pure syntax.   The approach is validated using programming assignments from an online course, and compared against syntax based approaches as a baseline. \n\nThe problem considered by the paper is interesting,  though it's not clear from the paper that the approach is a substantial improvement over previous work.  This is in part due to the fact that the paper is relatively short, and would benefit from more detail.   I noticed the following issues:\n\n1) The learning task is based on error patterns, but it's not clear to me what exactly that means from a software development standpoint. \n2) Terms used in the paper are not defined/explained.  For example, I assume GRU is gated recurrent unit, but this isn't stated. \n3) Treatment of related work is lacking.   For example, the Cai et al. paper from ICLR 2017 is not considered \n4) If I understand dependency reinforcement embedding correctly, a RNN is trained for every trace. If so, is this scalable? \n\nI believe the work is very promising,  but this manuscript should be improved prior to publication.[[CLA-POS],[JUS-POS],[DEP-POS],[FAI-POS],[CON-POS],[ENG-POS],[ACC-POS],[CST-POS],[NOV-POS],[ETH-NEG]]