In this paper, the authors consider the problem of generating a training data set for the neural programmer-interpreter from an executable oracle.  In particular, they aim at generating a complete set that fully specifies the behavior of the oracle.  The authors propose a technique that achieves this aim by borrowing ideas from programming language and abstract interpretation.  The technique systematically interacts with the oracle using observations, which are abstractions of environment states, and it is guaranteed to produce a data set that completely specifies the oracle.  The authors later describes how to improve this technique by further equating certain observations and exploring only one in each equivalence class.  Their experiments show that this improve technique can produce complete training sets for three programs. \n\nIt is nice to see the application of ideas from different areas for learning-related questions.  However, there is one thing that bothers me again and again. Why do we need a data-generation technique in the paper at all?  Typically, we are given a set of data, not an oracle that can generate such data, and our task is to learn something from the data.  If we have an executable oracle, it is now clear to me why we want to replicate this oracle by an instance of the neural programmer-interpreter.  One thing that I can see is that the technique in the paper can be used when we do research on the neural programmer-interpreter.  During research, we have multiple executable oracles and need to produce good training data from them.  The authors' technique may let us do this data-generation easily.  But this benefit to the researchers does not seem to be strong enough for the acceptance at ICLR'18.\n\n [[CLA-POS],[JUS-POS],[DEP-POS],[FAI-POS],[CON-NEG],[ENG-NEG],[ACC-POS],[CST-POS],[NOV-POS],[ETH-NEG]]