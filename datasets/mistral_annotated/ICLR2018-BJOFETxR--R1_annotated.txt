Summary:  The paper applies graph convolutions with deep neural networks to the problem of \"variable misuse\" (putting the wrong variable name in a program statement) in graphs created deterministically from source code.   Graph structure is determined by program abstract syntax tree (AST) and next-token edges, as well as variable/function name identity, assignment and other deterministic semantic relations.   Initial node embedding comes from both type and tokenized name information.   Gated Graph Neural Networks (GGNNs, trained by maximum likelihood objective) are then run for 8 iterations at test time. \n\nThe evaluation is extensive and mostly very good.   Substantial data set of 29m lines of code.   Reasonable baselines.   Nice ablation studies.   I would have liked to see separate precision and recall rather than accuracy.   The current 82.1% accuracy is nice to see,   but if 18% of my program variables were erroneously flagged as errors, the tool would be useless.    I'd like to know if you can tune the threshold to get a precision/recall tradeoff that has very few false warnings, but still catches some errors. \n\nNice work creating an implementation of fast GGNNs with large diverse graphs.   Glad to see that the code will be released.   Great to see that the method is fast---it seems fast enough to use in practice in a real IDE. \n\nThe model (GGNN) is not particularly novel, but I'm not much bothered by that.    I'm very happy to see good application papers at ICLR.   I agree with your pair of sentences in the conclusion: \"Although source code is well understood and studied within other disciplines such as programming language research, it is a relatively new domain for deep learning.  It presents novel opportunities compared to textual or perceptual data, as its (local) semantics are well-defined and rich additional information can be extracted using well-known, efficient program analyses. \"  I'd like to see work in this area encouraged.   So I recommend acceptance.   If it had better (e.g. ROC curve) evaluation and some modeling novelty, I would rate it higher still. \n\nSmall notes:\nThe paper uses the term \"data flow structure\" without defining it. \nYour data set consisted of C# code.   Perhaps future work will see if the results are much different in other languages.\n[[CLA-POS],[JUS-POS],[DEP-POS],[FAI-POS],[CON-POS],[ENG-NEG],[ACC-POS],[CST-POS],[NOV-POS],[ETH-POS]]