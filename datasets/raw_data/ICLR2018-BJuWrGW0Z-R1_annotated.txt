 "This paper considers the task of learning program embeddings with neural networks with the ultimate goal of bug detection program repair in the context of students learning to program.[[INT-NEU,PDI-NEU], [null]]  Three NN architectures are explored, which leverage program semantics rather than pure syntax.[[PDI-NEU], [null]]   The approach is validated using programming assignments from an online course, and compared against syntax based approaches as a baseline.[[RWK-NEU,MET-NEU], [CMP-NEU]] \n\nThe problem considered by the paper is interesting,[[PDI-POS], [EMP-POS]]  though it's not clear from the paper that the approach is a substantial improvement over previous work.[[RWK-POS,MET-POS], [CMP-POS]]  This is in part due to the fact that the paper is relatively short, and would benefit from more detail.[[OAL-NEG], [SUB-NEG]]   I noticed the following issues:\n\n1) The learning task is based on error patterns, but it's not clear to me what exactly that means from a software development standpoint.[[MET-NEG], [SUB-NEG]] \n2) Terms used in the paper are not defined/explained.[[OAL-NEG], [EMP-NEG]]  For example, I assume GRU is gated recurrent unit, but this isn't stated.[[MET-NEG], [SUB-NEG]] \n3) Treatment of related work is lacking.[[RWK-NEG], [SUB-NEG]]   For example, the Cai et al. paper from ICLR 2017 is not considered[[RWK-NEG,BIB-NEG], [SUB-NEG]] \n4) If I understand dependency reinforcement embedding correctly, a RNN is trained for every trace. If so, is this scalable?[[EXP-NEU], [EMP-NEU]] \n\nI believe the work is very promising,[[OAL-POS], [EMP-POS]]  but this manuscript should be improved prior to publication."[[OAL-NEG], [APR-NEG]]