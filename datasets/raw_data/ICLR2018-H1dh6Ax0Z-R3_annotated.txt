 "\n This was an interesting read.[[OAL-POS], [null]]   \n\nI feel that there is a mismatch between intuition of what a model could do (based on the structure of the architecture) versus what a model does.[[MET-NEG], [EMP-NEG]]  Just because the transition function is shared and the model could learn to construct a tree, when trained end-to-end the system is not sufficiently constrained to learn this specific behaviour. [[MET-NEG], [EMP-NEG]] More to a point. I think the search tree perspective is interesting,[[MET-POS], [null]]  but isn\u2019t this just a deeper model with shared weights? And a max operation?[[PDI-NEU,MET-NEU], [IMP-NEU]]  It seems no loss is used to force the embeddings produced by the transition model to match the embeddings that you would get if you take a particular action in a particular state, right?[[MET-NEU], [EMP-NEU]]  Is there any specific attempt to visualize or understand the embeddings inside the tree?[[MET-NEU], [EMP-NEU]]  The same regarding the rewards. If there is no auxiliary loss attempting to force the intermediary prediction to be valid rewards, why would the model use those free latent variables to encode rewards? [[MET-NEU], [IMP-NEU,EMP-NEU]] I think this is a pitfall that many deep network papers fall, where by laying out a particular structure it is directly inferred that the model discovers or follows a particular solution (where the latent have prescribed semantics). I would argue that is rarely the case.[[MET-NEG], [EMP-NEG]]  When the system is learned end-to-end, the structure does not impose the behaviour of the model, and is up to the authors of the paper to prove that the trained model does anything similar to expanding a tree. And this is not by showing final performance on a game.[[MET-NEG], [EMP-NEG]]  If indeed the model does anything similar to search, than all intermediary representations should correspond to what semantically they should.[[MET-NEU], [EMP-NEU]]  \nIgnoring my verbose comment, another view is that the baseline are disadvantaged to the treeQN, because they have less parameters (and are less deep which has a huge impact on the learnability and expressivity of the deep network).[[RWK-NEG,MET-NEG], [EMP-NEG]]