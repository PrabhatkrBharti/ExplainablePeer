# Summary\nThis paper introduces a new prediction problem where the model should predict the hidden opponent's state as well as the agent's state.  This paper presents a neural network architecture which takes the map information and several other features and reconstructs the unit occupancy and count information in the map.  The result shows that the proposed method performs better than several hand-designed baselines on two downstream prediction tasks in Starcraft. \n\n[Pros]\n- Interesting problem \n\n[Cons]\n- The proposed method is not much novel. \n- The evaluation is a bit limited to two specific downstream prediction tasks. \n\n# Novelty and Significance\n- The problem considered in this paper is interesting. \n- The proposed method is not much novel.  \n- Overall, this paper is too specific to Starcraft domain + particular downstream prediction tasks.  It would be much stronger to show the benefit of defogging objective on the actual gameplay rather than prediction tasks.  Alternatively, it could be also interesting to consider an RL problem where the agent should reveal the hidden state of the opponent as much/quickly as possible. \n\n# Quality\n- The experimental result is not much comprehensive.  The proposed method is expected to perform better than hand-designed methods on downstream prediction tasks.  It would be better to show an in-depth analysis of the learned model or show more results on different tasks (possibly RL tasks rather than prediction tasks). \n\n# Clarity\n- I did not fully understand the learning objective.  Does the model try to reconstruct the state of the current time-step or the future?  The learning objective is not clearly defined.  In Section 4.1, the target x and y have time steps from t1 to t2.  What is the range of t1 and t2?  If the proposed model is doing future prediction, it would be important to show and discuss long-term prediction results.[[CLA-POS],[JUS-POS],[DEP-POS],[FAI-NEU],[CON-POS],[ENG-NEG],[ACC-NEG],[CST-POS],[NOV-NEG],[ETH-NEU]]