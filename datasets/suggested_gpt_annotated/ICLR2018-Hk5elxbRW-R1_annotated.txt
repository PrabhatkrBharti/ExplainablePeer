The paper is clear and well written.  The proposed approach seems to be of interest and to produce interesting results.  As datasets in various domain get more and more precise, the problem of class confusing with very similar classes both present or absent of the training dataset is an important problem, and this paper is a promising contribution to handle those issues better. \n\nThe paper proposes to use a top-k loss such as what has been explored with SVMs in the past, but with deep models.  As the loss is not smooth and has sparse gradients, the paper suggests to use a smoothed version where maximums are replaced by log-sum-exps. \n\nI have two main concerns with the presentation. \n\nA/ In addition to the main contribution, the paper devotes a significant amount of space to explaining how to compute the smoothed loss.  This can be done by evaluating elementary symmetric polynomials at well-chosen values. \n\nThe paper argues that classical methods for such evaluations (e.g., using the usual recurrence relation or more advanced methods that compensate for numerical errors) are not enough when using single precision floating point arithmetic.  The paper also advances that GPU parallelization must be used to be able to efficiently train the network. \n\nThose claims are not substantiated, however, and the method proposed by the paper seems to add substantial complexity without really proving that it is useful. \n\nThe paper proposes a divide-and-conquer approach, where a small amount of parallelization can be achieved within the computation of a single elementary symmetric polynomial value.  I am not sure why this is of interest - can't the loss evaluation already be parallelized trivially over examples in a training/testing minibatch?  I believe the paper could justify this approach better by providing a bit more insights as to why it is required.  For instance:\n\n- What accuracies and train/test times do you get using standard methods for the evaluation of elementary symmetric polynomials? \n- How do those compare with CE and L_{5, 1} with the proposed method? \n- Are numerical instabilities making this completely unfeasible?  This would be especially interesting to understand if this explodes in practice, or if evaluations are just a slightly inaccurate without much accuracy loss. \n\n\nB/ No mention is made of the object detection problem, although multiple of the motivating examples in Figure 1 consider cases that would fall naturally into the object detection framework.  Although top-k classification considers in principle an easier problem (no localization), a discussion, as well as a comparison of top-k classification vs., e.g., discarding localization information out of object detection methods, could be interesting. \n\nAdditional comments:\n\n- Figure 2b: this visualization is confusing.  This is presented in the same figure and paragraph as the CIFAR results,  but instead uses a single synthetic data point in dimension 5, and k=1.  This is not convincing.  An actual experiment using full dataset or minibatch gradients on CIFAR and the same k value would be more interesting[[CLA-POS],[JUS-POS],[DEP-POS],[FAI-NEG],[CON-POS],[ENG-NEU],[ACC-POS],[CST-POS],[NOV-POS],[ETH-NEU]]